rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function hasRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || hasRole('admin'));
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && isOwner(userId);
      allow delete: if false; // Prevent user deletion
    }

    // Tickets collection
    match /tickets/{ticketId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        hasRole('admin') || 
        hasRole('support')
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        hasRole('admin') || 
        hasRole('support')
      );
      allow delete: if isAuthenticated() && hasRole('admin');
    }

    // Responses collection
    match /responses/{responseId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (hasRole('admin') || hasRole('support'));
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        hasRole('admin')
      );
      allow delete: if isAuthenticated() && hasRole('admin');
    }

    // Logs collection
    match /logs/{logId} {
      allow read: if isAuthenticated() && hasRole('admin');
      allow create: if isAuthenticated();
      allow update, delete: if false; // Logs are immutable
    }
  }
} 